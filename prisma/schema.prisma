generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  itemId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@unique([cartId, itemId])
}

model Order {
  id        String       @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus      @default(PENDING) 
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  orderItems OrderItem[] 
}
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  itemId    String
  name      String   
  price     Float   
  image     String?  
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id]) // opsional, tapi sangat disarankan
}


model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  quantity  Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model Item {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(100)
  image       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  price       Float
  stock       Int
  type        Category
  isFeatured  Boolean    @default(false)
  isHot       Boolean    @default(false)
  isNew       Boolean    @default(false)
  isOnSale    Boolean    @default(false)
  rating      Int        @default(0)
  userId      String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  user        User?      @relation("UserItems", fields: [userId], references: [id])
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String   @db.VarChar(100)
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  RefreshToken String?
  AccessToken  String?
  image        String?
  role         UserRole @default(USER)
  cart         Cart?
  orders       Order[]  
  items        Item[]   @relation("UserItems")
}

model Collaborator {
  id        String           @id @default(cuid())
  name      String           @db.VarChar(100)
  email     String           @unique
  role      CollaboratorRole
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Category {
  Tshirt
  Hoodies
  Streetwear
  luxury
  Jackets
  Sweatshirts
}

enum UserRole {
  ADMIN
  USER
}

enum CollaboratorRole {
  ecommerce_expert
  supplier
  influencer
  developer
}
